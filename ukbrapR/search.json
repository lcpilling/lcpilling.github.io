[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luke Pilling. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pilling L (2024). ukbrapR: R functions use UK Biobank Research Analysis Platform (RAP). https://lukepilling.github.io/ukbrapR, https://github.com/lukepilling/ukbrapR.","code":"@Manual{,   title = {ukbrapR: R functions to use in the UK Biobank Research Analysis Platform (RAP)},   author = {Luke Pilling},   year = {2024},   note = {https://lukepilling.github.io/ukbrapR, https://github.com/lukepilling/ukbrapR}, }"},{"path":"/index.html","id":"ukbrapr","dir":"","previous_headings":"","what":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"{ukbrapR} (phonetically: ‘U-K-B-wrapper’) R package use UK Biobank Research Analysis Platform (RAP).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"works DNAnexus UK Biobank project JupyterLab Spark Cluster. tools, launch JupyterLab environment Spark Cluster. R, install {ukbrapR}. install necessary dependencies interacting Python, Apache Spark, Arrow C++ library. highly recommend saving “snapshot” packages installed, loading launching JupyterLab.","code":"remotes::install_github(\"lukepilling/ukbrapR\")          # install development version  remotes::install_github(\"lukepilling/ukbrapR@*release\") # install latest release remotes::install_github(\"lukepilling/ukbrapR@v0.0.2\")   # install specific version (see tags)"},{"path":"/index.html","id":"get-phenotype-data","dir":"","previous_headings":"","what":"Get phenotype data","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Pull phenotypes Spark R data frame. Recommend launching Spark cluster least mem1_hdd1_v2_x16 2 nodes otherwise can fail error “…ensure workers…sufficient resources” underlying code mostly UK Biobank GitHub.","code":"# get phenotype data (participant ID, sex, baseline age, and baseline assessment date) ukb <- get_rap_phenos(c(\"eid\", \"p31\", \"p21003_i0\", \"p53_i0\")) #> 48.02 sec elapsed  # summary of data table(ukb$p31) #> Female   Male  #> 273297 229067 summary(ukb$p21003_i0) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  37.00   50.00   58.00   56.53   63.00   73.00"},{"path":"/index.html","id":"get-medical-records-diagnoses","dir":"","previous_headings":"","what":"Get medical records diagnoses","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"given set diagnostic codes (ICD10, Read2, CTV3) get participant Electronic Medical Records (EMR) data. Returns list containing 3 data frames “long” format (>1 row per participant): subset gp_clinical, hesin_diag death_cause matched codes.","code":"# example diagnostic codes for CKD from GEMINI multimorbidity project are included head(codes_df_ckd) #>   vocab_id  code #> 1    ICD10 N18.3 #> 2    ICD10 N18.4 #> 3    ICD10 N18.5 #> 4    ICD10 N18.6 #> 5    ICD10 N18.9 #> 6    ICD10   N19  # get diagnosis data - returns list of data frames (one per source) diagnosis_list <- get_emr(codes_df_ckd) #> 7 ICD10 codes, 40 Read2 codes, 37 CTV3 codes  #> 298.18 sec elapsed  # N records for each source nrow(diagnosis_list$gp_clinical)  #  29,088 nrow(diagnosis_list$hesin_diag)   # 206,394 nrow(diagnosis_list$death_cause)  #   1,962"},{"path":"/index.html","id":"get-date-first-diagnosis","dir":"","previous_headings":"","what":"Get date first diagnosis","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Identify date first diagnosed participant “long” datasets ascertained get_emr() (cause death, HES, GP).","code":"# for each participant, get Date First diagnosed with the condition diagnosis_df <- get_df(diagnosis_list) #> 0.98 sec elapsed  # skim data  skimr::skim(diagnosis_df) #> ── Data Summary ──────────────────────── #>                            Values       #> Name                       diagnosis_df #> Number of rows             31945        #> Number of columns          5            #>  #> ── Variable type: Date ─────────────────────────────────────────────────────────── #>   skim_variable  n_missing complete_rate min        max        median     n_unique #> 1 gp_df              19195        0.399  1958-01-01 2017-09-06 2009-09-15     3264 #> 2 hes_df              7242        0.773  1995-08-29 2022-10-31 2018-05-15     5562 #> 3 death_df           30018        0.0603 2008-02-20 2022-12-15 2020-03-03     1429 #> 4 df                     6        1.00   1958-01-01 2022-12-01 2015-02-17     6367"},{"path":"/index.html","id":"identify-self-reported-illness--cancer","dir":"","previous_headings":"","what":"Identify self-reported illness / cancer","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"UK Biobank cancer (https://biobank.ctsu.ox.ac.uk/crystal/field.cgi?id=20001) non-cancer (https://biobank.ctsu.ox.ac.uk/crystal/field.cgi?id=20002) illness codes can included codes list: function default pull appropriate self-reported fields RAP Spark system determine whether participant reported provided codes, identify self-reported date diagnosis: can add quite bit time. prefer get fields provide function time, can: can add data diagnosis list object get overall date first (self-reported plus medical records):","code":"# Example, for haemochromatosis: print(codes_df_hh) #>         vocab_id   code #> 1  ukb_noncancer   1507 #> 2           ICD9 275.03 #> 3          ICD10  E83.1 #> 4          Read2  126A. #> 5          Read2  4L41. #> 6          Read2  677C0 #> 7          Read2  C350. #> 8          Read2  C3500 #> 9           CTV3  C3500 #> 10          CTV3  X40QQ #> 11          CTV3  XaIyI #> 12          CTV3  XaIyx #> 13          CTV3  XaXHI #> 14          CTV3  XE13K #> 15          CTV3  X307o #> 16          CTV3  X307p selfrep_df = get_selfrep_illness(codes_df)  table(selfrep_df$selfrep) #>     0      1  #> 502099    170  summary(selfrep_df$selfrep_df) #>         Min.      1st Qu.       Median         Mean      3rd Qu.         Max.         NA's  #> \"1941-11-25\" \"2003-07-02\" \"2007-07-02\" \"2006-06-26\" \"2011-07-02\" \"2022-07-02\"     \"502100\"  table(selfrep_df$selfrep_i) #>  0  1  2  3  #> 86 16 65  3 selfrep_df = get_selfrep_illness(codes_df, ukb_dat = ukb_dat) diagnosis_list              <- get_emr(codes_df_hh) selfrep_df                  <- get_selfrep_illness(codes_df_hh) diagnosis_list[[\"selfrep\"]] <- selfrep_df diagnosis_df                <- get_df(diagnosis_list)"},{"path":"/index.html","id":"example-analysis","dir":"","previous_headings":"","what":"Example analysis","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Hypothesis: baseline age sex associated risk incident CKD diagnosis medical record follow-","code":"# merge phenotype data with ascertained diagnoses ukb <- dplyr::left_join(ukb, diagnosis_df, by=\"eid\")  # create binary \"ever diagnosed\" variable and  # time-to-event from baseline (incident only) (or time to censoring, if no diagnosis) ukb <- ukb |> dplyr::mutate(     CKD_bin  = dplyr::if_else(!is.na(df), 1, 0),     CKD_time = dplyr::case_when(         !is.na(df) & df > p53_i0 ~ as.numeric(df - p53_i0)/365.25,         is.na(df) ~ as.numeric(lubridate::dmy(\"31-10-2022\") - p53_i0)/365.25,         TRUE ~ NA     ) )  table(ukb$CKD_bin) #>      0      1  #> 470425  31939  summary(ukb$CKD_time[ ukb$CKD_bin==1 ]) #>   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.003   4.427   7.863   7.694  11.244  16.512    6607   # fit time to event CoxPH model  library(survival) fit_CKD_coxph <- coxph(Surv(CKD_time, CKD_bin) ~ p21003_i0 + p31, data = ukb)  # get tidy model output with 95% CIs and extreme p-values lukesRlib::tidy_ci(fit_CKD_coxph) #> CoxPH model (estimate=Hazard Ratio) :: N=495757, Nevents=25332 :: C-statistic=0.71 #> # A tibble: 2 × 8 #>   term      estimate std.error statistic  p.value conf.low conf.high p.extreme  #>   <chr>        <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>      #> 1 p21003_i0     1.12   0.00104     106.  0            1.11      1.12 2.22e-2462 #> 2 p31Male       1.16   0.0126       11.8 3.27e-32     1.13      1.19 NA"},{"path":"/index.html","id":"upload-file-to-the-rap","dir":"","previous_headings":"","what":"Upload file to the RAP","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"wrapper quickly upload file worker node RAP space.","code":"# save phenotypes to a file and upload to current working directory readr::write_tsv(ukb, \"ukbrap.phenos.20231114.txt.gz\") upload_to_rap(\"ukbrap.phenos.20231114.txt.gz\")  # save \"long\" diagnosis data plus the derived \"wide\" date first and upload to directory \"extracts\" readr::write_tsv(diagnosis_list$death_cause, \"ukbrap.CKD.death_cause.20231114.txt.gz\") readr::write_tsv(diagnosis_list$hesin_diag,  \"ukbrap.CKD.hesin_diag.20231114.txt.gz\") readr::write_tsv(diagnosis_list$gp_clinical, \"ukbrap.CKD.gp_clinical.20231114.txt.gz\") readr::write_tsv(diagnosis_df, \"ukbrap.CKD.date_first.20231114.txt.gz\")  upload_to_rap(\"ukbrap.*.20231114.txt.gz\", dir=\"extracts/\")"},{"path":"/index.html","id":"benchmarking","dir":"","previous_headings":"","what":"Benchmarking","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"DNAnexus Spark cluster: mem1_hdd1_v2_x16 2 nodes “Normal” priority Approx. time: 20 mins Approx. cost: £0.20 Note: time can vary depending number phenotypes/diagnostic codes requested, busy platform .","code":""},{"path":"/reference/get_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant Date First (DF) diagnosis — get_df","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"participant identify date first diagnosis available electronic medical records & self-reported data.","code":""},{"path":"/reference/get_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"","code":"get_df(   diagnosis_list,   include_selfrep = TRUE,   include_gp_clinical = TRUE,   include_hesin = TRUE,   include_death_cause = TRUE,   prefix = NULL,   verbose = FALSE )"},{"path":"/reference/get_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"diagnosis_list list data frames. participant data requested diagnosis codes: `death_cause`, `hesin_diag`, `gp_clinical`. include_selfrep logical. Include self-reported diagnosesin combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_gp_clinical logical. Include GP data combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_hesin logical. Include HES data combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_death_cause logical. Include cause death combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE prefix String. Prefix add variable names (e.g., prefix=\"chd\") output variables \"chd_selfrep_df\", \"chd_df\" etc. default=NULL verbose Logical. verbose, default=FALSE","code":""},{"path":"/reference/get_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"Returns single, \"wide\" data frame: participant data requested diagnosis codes \"date first\" `_df` variables. One source data, combined variable.","code":""},{"path":"/reference/get_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"Luke Pilling","code":""},{"path":"/reference/get_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"","code":"# example diagnostic codes for haemochromatosis print(codes_df_hh)  # get diagnosis data - returns list of data frames (one per source) diagnosis_list <- get_emr(codes_df_hh)  # get self-reported illess data - returns a data frame selfrep_df <- get_selfrep_illness(codes_df_hh)  # add self-reported to the `diagnosis_list` object diagnosis_list[[\"selfrep\"]] <- selfrep_df  # for each participant, get Date First diagnosed with the condition diagnosis_df = get_df(diagnosis_list)  # save to files on the RAP worker node save(diagnosis_list, diagnosis_df, file=\"ukbrap.HH.date_first.20240221.RDat\")  # upload data to RAP storage upload_to_rap(file=\"ukbrap.HH.date_first.20240221.RDat\", dir=\"\")"},{"path":"/reference/get_emr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr","text":"Using Spark node/cluster UK Biobank Research Analysis Platform (DNAnexus), use R get medical records specific diagnostic codes list","code":""},{"path":"/reference/get_emr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr","text":"","code":"get_emr(   codes_df,   vocab_col = \"vocab_id\",   codes_col = \"code\",   spark_master = \"spark://master:41000\",   verbose = FALSE )"},{"path":"/reference/get_emr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr","text":"codes_df data frame. Contains `vocab_col` `codes_col` .e., list diagnostic codes, indicator vocabulary. vocab_col string. Column name `codes_df` contains vocabulary indicator code (vocab IDs 'ICD10' 'Read2' 'CTV3'). default='vocab_id' codes_col string. Column name `codes_df` contains diagnostic code ('ICD10' 'Read2' 'CTV3' codes). default='code' spark_master string. `master` argmuent passed `sparklyr::spark_connect()`. default='spark://master:41000' verbose Logical. verbose, default=FALSE","code":""},{"path":"/reference/get_emr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr","text":"Returns list data frames (participant data requested diagnosis codes: `death_cause`, `hesin_diag`, `gp_clinical`. Also includes original codes list)","code":""},{"path":"/reference/get_emr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr","text":"Luke Pilling","code":""},{"path":"/reference/get_emr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr","text":"","code":"# example diagnostic codes for CKD from GEMINI multimorbidity project head(codes_df_ckd)  # get EMR data - returns list of data frames (one per source) emr_dat <- get_emr(codes_df_ckd)  # save to files on the RAP worker node -- either as an R object, or separate as text files: save(emr_dat, \"ukbrap.CKD.emr.20231114.RDat\") readr::write_tsv(emr_dat$hesin_diag,  \"ukbrap.CKD.hesin_diag.20231114.txt.gz\")  # upload data to RAP storage upload_to_rap(file=\"ukbrap.CKD.*.20231114.*\", dir=\"\")"},{"path":"/reference/get_rap_phenos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant phenotype data — get_rap_phenos","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"Using Spark node/cluster UK Biobank Research Analysis Platform (DNAnexus), use R extract provided set variables. Using code UK Biobank DNAnexus team https://github.com/UK-Biobank/UKB-RAP-Notebooks/blob/main/NBs_Prelim/105_export_participant_data_to_r.ipynb","code":""},{"path":"/reference/get_rap_phenos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"","code":"get_rap_phenos(   names,   value_coding = \"replace\",   names_are_titles = FALSE,   record = NULL,   verbose = FALSE )"},{"path":"/reference/get_rap_phenos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"names string vector strings. variable name(s) required. e.g., c(\"eid\",\"p31\",\"p21003_i0\") value_coding string. handle coded fields. \"replace\" coding value exists, replace raw value code; \"raw\" export raw values field; \"exclude\" coding value exists, export value (commonly used sparse fields). default=\"replace\" names_are_titles Logical. Passing DNAnexus variable \"titles\" e.g., c(\"Age recruitment\", \"Standing height | Instance 0\"), default=FALSE record string. `dnanexus_link` file descriptor .dataset use. Default (left NULL) use recent update default=recent dataset update verbose Logical. verbose, default=FALSE","code":""},{"path":"/reference/get_rap_phenos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"Returns data.frame (participant data requested variables)","code":""},{"path":"/reference/get_rap_phenos.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"Luke Pilling","code":""},{"path":"/reference/get_rap_phenos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"","code":"# get phenotype data ukb <- get_rap_phenos(c(\"eid\",\"p31\",\"p21003_i0\",\"p53_i0\"))  # save to file on the RAP worker node readr::write_tsv(ukb, \"ukbrap.phenos.20231114.txt.gz\")  # upload data to RAP storage upload_to_rap(file=\"ukbrap.phenos.20231114.txt.gz\", dir=\"\")"},{"path":"/reference/get_selfrep_illness.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness","text":"specific self-reported illness code codes, identify whether participant self-reported visit, identify year.  Intended use UK Biobank DNnexus Research Analysis Platform, user provides dataframe UK Biobank self-reported fields works system.","code":""},{"path":"/reference/get_selfrep_illness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness","text":"","code":"get_selfrep_illness(   codes_df,   vocab_col = \"vocab_id\",   codes_col = \"code\",   ukb_dat = NULL,   n_cancer_arrays = 5,   n_noncancer_arrays = 30,   verbose = FALSE )"},{"path":"/reference/get_selfrep_illness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness","text":"codes_df data frame. Contains `vocab_col` `codes_col` .e., indicator vocabulary diagnostic codes. vocab_col string. Column name `codes_df` contains vocabulary indicator code (self-reported needs either \"ukb_cancer\" \"ukb_noncancer\"). default='vocab_id' codes_col string. Column name `codes_df` contains self-reported disease code (e.g., 1507). default='code' ukb_dat data frame. Optional. provided, get phenotypes RAP. Contains self-reported illness fields e.g., `p20008_i0_a0`. default=NULL n_cancer_arrays integer. trivial determine max number arrays request Spark self-reported illnesses. defaults match currently (Feb 2024) available data may need increasing future. default=5 n_noncancer_arrays integer. trivial determine max number arrays request Spark self-reported illnesses. defaults match currently (Feb 2024) available data may need increasing future. default=30 verbose Logical. verbose, default=FALSE spark_master string. `master` argmuent passed `sparklyr::spark_connect()`. default='spark://master:41000'","code":""},{"path":"/reference/get_selfrep_illness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness","text":"Returns data frame four variables: eid, selfrep [binary, codes identified?], selfrep_df [date reported illness], selfrep_i [instance illness first reported]","code":""},{"path":"/reference/get_selfrep_illness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness","text":"Luke Pilling","code":""},{"path":"/reference/get_selfrep_illness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness","text":"","code":"# example diagnostic codes for haemochromatosis print(codes_df_hh)  # get self-reported data - a data frame selfrep_df <- get_selfrep_illness(codes_df_hh)  # inspect variables table(selfrep_df$selfrep) summary(selfrep_df$selfrep_df) table(selfrep_df$selfrep_i)"},{"path":"/reference/upload_to_rap.html","id":null,"dir":"Reference","previous_headings":"","what":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"Use R upload file UK Biobank RAP (really just wrapper `dx upload`)","code":""},{"path":"/reference/upload_to_rap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"","code":"upload_to_rap(file, dir = \"FALSE\", verbose = FALSE)"},{"path":"/reference/upload_to_rap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"file string. Filename file uploaded (character) dir string. Target directory RAP space. blank, current working directory (character) verbose Logical. verbose, default=FALSE","code":""},{"path":"/reference/upload_to_rap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"NA","code":""},{"path":"/reference/upload_to_rap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"Luke Pilling","code":""},{"path":"/reference/upload_to_rap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"","code":"readr::write_tsv(data.frame(x=1:10,y=11:20), \"ukbrap.dummy.20231114.txt.gz\")  # upload file to RAP storage upload_to_rap(file=\"ukbrap.dummy.20231114.txt.gz\", dir=\"extracts/\")"},{"path":[]},{"path":"/news/index.html","id":"new-features-0-1-0-9000","dir":"Changelog","previous_headings":"","what":"New features","title":"ukbrapR v0.1.0.9000 (29 Feb 2024)","text":"New argument “prefix” get_df() - user can provide string prefix output variable names","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"ukbrapR v0.1.0 (21 Feb 2024)","text":"get_selfrep_illness() - gets illness information self-report fields. Derives “date first” age/year reported, incorporating visits participant Two example code lists incuded: codes_df_ckd (GEMINI CKD), codes_df_hh (haemochromatosis, self-report)","code":""},{"path":"/news/index.html","id":"changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"ukbrapR v0.1.0 (21 Feb 2024)","text":"get_emr_df() re-named get_df() reflect can now include information self-reported illness get_emr_diagnoses() re-named get_emr() reflect actually retrieves record gp_clinical just diagnoses (e.g., BMI appropriate codes provided)","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.1.0 (21 Feb 2024)","text":"many","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"New features","title":"ukbrapR v0.0.2 (14 Nov 2023)","text":"get_emr_diagnoses() - function get electronic medical records diagnoses Spark-based death records, hospital episode statistics, primary care (GP) databases. get_emr_df() - function get date first diagnosed provided code Electronic Medical Record source.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.0.2 (14 Nov 2023)","text":"Extra input checking get_rap_phenos() output consistent direct use get_emr_*() functions Updated URL example CKD clinical codes","code":""},{"path":"/news/index.html","id":"ukbrapr-v001-26-oct-2023","dir":"Changelog","previous_headings":"","what":"ukbrapR v0.0.1 (26 Oct 2023)","title":"ukbrapR v0.0.1 (26 Oct 2023)","text":"Initial release containing two functions: - get_rap_phenos() - upload_to_rap()","code":""}]
