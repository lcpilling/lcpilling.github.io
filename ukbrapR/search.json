[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luke Pilling. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pilling L (2023). ukbrapR: R functions use UK Biobank Research Analysis Platform (RAP). https://lukepilling.github.io/ukbrapR, https://github.com/lukepilling/ukbrapR.","code":"@Manual{,   title = {ukbrapR: R functions to use in the UK Biobank Research Analysis Platform (RAP)},   author = {Luke Pilling},   year = {2023},   note = {https://lukepilling.github.io/ukbrapR, https://github.com/lukepilling/ukbrapR}, }"},{"path":"/index.html","id":"ukbrapr","dir":"","previous_headings":"","what":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"{ukbrapR} (phonetically: ‘U-K-B-rapper’) small package R functions use UK Biobank Research Analysis Platform (RAP).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"works DNAnexus UK Biobank project JupyterLab Spark Cluster. tools, create JupyterLab environment Spark Cluster. Start R session install package. install necessary dependencies interacting Python environment, Apache Spark, Arrow C++ library.","code":"if (!require(remotes)) install.packages(\"remotes\") remotes::install_github(\"lukepilling/ukbrapR\")   # Takes a few minutes to build the dependencies. Suggest saving as a snapshot."},{"path":"/index.html","id":"get-phenotype-data","dir":"","previous_headings":"","what":"Get phenotype data","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Extracts phenotype variables Spark database R data frame. Recommend launching Spark cluster least mem1_hdd1_v2_x16 2 nodes otherwise can fail error “…ensure workers…sufficient resources” underlying code mostly UK Biobank GitHub.","code":"# get phenotype data (participant ID, sex, and baseline age) df <- get_rap_phenos(c(\"eid\", \"p31\", \"p21003_i0\")) #> 48.02 sec elapsed  # summary of data table(df$p31) #> Female   Male  #> 273297 229067 summary(df$p21003_i0) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  37.00   50.00   58.00   56.53   63.00   73.00   # save to file on the RAP worker node readr::write_tsv(df, \"ukbrap.phenos.20231114.txt.gz\")"},{"path":"/index.html","id":"get-medical-records-diagnoses","dir":"","previous_headings":"","what":"Get medical records diagnoses","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"given set diagnostic codes (ICD10, Read2, CTV3) get participant Electronic Medical Records (EMR) data. Returns list containing 3 data frames “long” format (>1 row per participant): subset death_cause, hesin_diag gp_clinical matched codes.","code":"# example diagnostic codes for CKD from GEMINI multimorbidity project codes_df <- readr::read_tsv(\"https://raw.githubusercontent.com/GEMINI-multimorbidity/diagnostic_codes/main/codelists/CKD.txt\")  # get diagnosis data - returns list of data frames (one per source) diagnoses_list <- get_emr_diagnoses(codes_df) #> 7 ICD10 codes, 40 Read2 codes, 37 CTV3 codes  #> 298.18 sec elapsed  # save to files on the RAP worker node readr::write_tsv(diagnoses_list$death_cause, \"ukbrap.CKD.death_cause.20231114.txt.gz\") readr::write_tsv(diagnoses_list$hesin_diag,  \"ukbrap.CKD.hesin_diag.20231114.txt.gz\") readr::write_tsv(diagnoses_list$gp_clinical, \"ukbrap.CKD.gp_clinical.20231114.txt.gz\")"},{"path":"/index.html","id":"get-date-first-diagnosis","dir":"","previous_headings":"","what":"Get date first diagnosis","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Identify date first diagnosed participant “long” datasets ascertained get_emr_diagnoses() (cause death, HES, GP).","code":"# for each participant, get Date First diagnosed with the condition diagnosis_df = get_emr_df(diagnosis_list) #> 0.98 sec elapsed  # save to files on the RAP worker node readr::write_tsv(diagnosis_df, \"ukbrap.CKD.date_first.20231114.txt.gz\")"},{"path":"/index.html","id":"upload-file-to-the-rap","dir":"","previous_headings":"","what":"Upload file to the RAP","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"wrapper quickly upload file worker node RAP space.","code":"# uploads to current working directory upload_to_rap(\"ukbrap.phenos.20231114.txt.gz\")  # uploads to directory \"extracts\" upload_to_rap(\"ukbrap.*.20231114.txt.gz\", dir=\"extracts/\")"},{"path":"/reference/get_emr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant Date First (DF) diagnosis from Electronic Medical Records (EMR) data — get_emr_df","title":"Get UK Biobank participant Date First (DF) diagnosis from Electronic Medical Records (EMR) data — get_emr_df","text":"participant identify date first diagnosis provided electronic medical records.","code":""},{"path":"/reference/get_emr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant Date First (DF) diagnosis from Electronic Medical Records (EMR) data — get_emr_df","text":"","code":"get_emr_df(   diagnosis_list,   include_death_cause = TRUE,   include_hesin = TRUE,   include_gp_clinical = TRUE,   verbose = FALSE )"},{"path":"/reference/get_emr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant Date First (DF) diagnosis from Electronic Medical Records (EMR) data — get_emr_df","text":"diagnosis_list list data frames. participant data requested diagnosis codes: `death_cause`, `hesin_diag`, `gp_clinical`. include_death_cause logical. Include cause death combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_hesin logical. Include HES data combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_gp_clinical logical. Include GP data combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE verbose Logical. verbose, default=FALSE","code":""},{"path":"/reference/get_emr_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant Date First (DF) diagnosis from Electronic Medical Records (EMR) data — get_emr_df","text":"Returns single, \"wide\" data frame: participant data requested diagnosis codes \"date first\" `_df` variables. One source data, combined variable.","code":""},{"path":"/reference/get_emr_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant Date First (DF) diagnosis from Electronic Medical Records (EMR) data — get_emr_df","text":"Luke Pilling","code":""},{"path":"/reference/get_emr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant Date First (DF) diagnosis from Electronic Medical Records (EMR) data — get_emr_df","text":"","code":"# example diagnostic codes for CKD from GEMINI multimorbidity project codes_df <- readr::read_tsv(\"https://raw.githubusercontent.com/GEMINI-multimorbidity/diagnostic_codes/main/codelists/CKD.txt\") codes_df  # get diagnosis data - returns list of data frames (one per source) diagnosis_list <- get_emr_diagnoses(codes_df) # 7 ICD10 codes, 40 Read2 codes, 37 CTV3 codes  # 298.18 sec elapsed  # for each participant, get Date First diagnosed with the condition diagnosis_df = get_emr_df(diagnosis_list) # 0.9 sec elapsed  # save to files on the RAP worker node readr::write_tsv(diagnosis_df, \"ukbrap.CKD.date_first.20231114.txt.gz\")  # upload data to RAP storage upload_to_rap(file=\"ukbrap.CKD.date_first.20231114.txt.gz\", dir=\"\")"},{"path":"/reference/get_emr_diagnoses.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr_diagnoses","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr_diagnoses","text":"Using Spark node/cluster UK Biobank Research Analysis Platform (DNAnexus), use R get medical records specific diagnostic codes list","code":""},{"path":"/reference/get_emr_diagnoses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr_diagnoses","text":"","code":"get_emr_diagnoses(   codes_df,   vocab_col = \"vocab_id\",   codes_col = \"code\",   spark_master = \"spark://master:41000\",   verbose = FALSE )"},{"path":"/reference/get_emr_diagnoses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr_diagnoses","text":"codes_df data frame. Contains `vocab_col` `codes_col` .e., list diagnostic codes, indicator vocabulary. vocab_col string. Column name `codes_df` contains vocabulary indicator code (vocab IDs 'ICD10' 'Read2' 'CTV3'). default='vocab_id' codes_col string. Column name `codes_df` contains diagnostic code ('ICD10' 'Read2' 'CTV3' codes). default='code' spark_master string. `master` argmuent passed `sparklyr::spark_connect()`. default='spark://master:41000' verbose Logical. verbose, default=FALSE","code":""},{"path":"/reference/get_emr_diagnoses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr_diagnoses","text":"Returns list data frames (participant data requested diagnosis codes: `death_cause`, `hesin_diag`, `gp_clinical`. Also includes original codes list)","code":""},{"path":"/reference/get_emr_diagnoses.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr_diagnoses","text":"Luke Pilling","code":""},{"path":"/reference/get_emr_diagnoses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant Electronic Medical Records (EMR) data — get_emr_diagnoses","text":"","code":"# example diagnostic codes for CKD from GEMINI multimorbidity project codes_df <- readr::read_tsv(\"https://raw.githubusercontent.com/GEMINI-multimorbidity/diagnostic_codes/main/codelists/CKD.txt\") codes_df  # get diagnosis data - returns list of data frames (one per source) diagnoses_list <- get_emr_diagnoses(codes_df) # 7 ICD10 codes, 40 Read2 codes, 37 CTV3 codes  # 298.18 sec elapsed  # save to files on the RAP worker node readr::write_tsv(diagnoses_list$death_cause, \"ukbrap.CKD.death_cause.20231114.txt.gz\") readr::write_tsv(diagnoses_list$hesin_diag,  \"ukbrap.CKD.hesin_diag.20231114.txt.gz\") readr::write_tsv(diagnoses_list$gp_clinical, \"ukbrap.CKD.gp_clinical.20231114.txt.gz\")  # upload data to RAP storage upload_to_rap(file=\"ukbrap.CKD.*.20231114.txt.gz\", dir=\"\")"},{"path":"/reference/get_rap_phenos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant phenotype data — get_rap_phenos","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"Using Spark node/cluster UK Biobank Research Analysis Platform (DNAnexus), use R extract provided set variables. Using code UK Biobank DNAnexus team https://github.com/UK-Biobank/UKB-RAP-Notebooks/blob/main/NBs_Prelim/105_export_participant_data_to_r.ipynb","code":""},{"path":"/reference/get_rap_phenos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"","code":"get_rap_phenos(names, record = NULL, verbose = FALSE)"},{"path":"/reference/get_rap_phenos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"names string vector strings. variable name(s) required. e.g., c(\"eid\",\"p31\",\"p21003_i0\") record string. `dnanexus_link` file descriptor .dataset use. Default (left NULL) use recent update default=recent dataset update verbose Logical. verbose, default=FALSE","code":""},{"path":"/reference/get_rap_phenos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"Returns data.frame (participant data requested variables)","code":""},{"path":"/reference/get_rap_phenos.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"Luke Pilling","code":""},{"path":"/reference/get_rap_phenos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"","code":"# get phenotype data df <- get_rap_phenos(c(\"eid\",\"p31\",\"p21003_i0\"))  # save to file on the RAP worker node readr::write_tsv(df, \"ukbrap.phenos.20231114.txt.gz\")  # upload data to RAP storage upload_to_rap(file=\"ukbrap.phenos.20231114.txt.gz\", dir=\"\")"},{"path":"/reference/upload_to_rap.html","id":null,"dir":"Reference","previous_headings":"","what":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"Use R upload file UK Biobank RAP (really just wrapper `dx upload`)","code":""},{"path":"/reference/upload_to_rap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"","code":"upload_to_rap(file, dir = \"FALSE\", verbose = FALSE)"},{"path":"/reference/upload_to_rap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"file string. Filename file uploaded (character) dir string. Target directory RAP space. blank, current working directory (character) verbose Logical. verbose, default=FALSE","code":""},{"path":"/reference/upload_to_rap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"NA","code":""},{"path":"/reference/upload_to_rap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"Luke Pilling","code":""},{"path":"/reference/upload_to_rap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"","code":"readr::write_tsv(data.frame(x=1:10,y=11:20), \"ukbrap.dummy.20231114.txt.gz\")  # upload file to RAP storage upload_to_rap(file=\"ukbrap.dummy.20231114.txt.gz\", dir=\"extracts/\")"}]
