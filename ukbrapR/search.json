[{"path":"https://lcpilling.github.io/ukbrapR/articles/ascertain_diagnoses.html","id":"requires-exported-files","dir":"Articles","previous_headings":"","what":"Requires exported files","title":"Ascertain diagnoses","text":"needs happen per project. Running export_tables() submit necessary table-exporter jobs save raw medical records files RAP persistent storage project. ~10Gb text files created. cost ~£0.15 per month store RAP standard storage. files exported (~15mins) can used functions extract diagnoses based codes lists.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/articles/ascertain_diagnoses.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"Ascertain diagnoses","text":"Depending data source different coding vocabularies required: ICD10 (searching HES diagnoses, cause death, cancer registry) ICD9 (searching older HES diagnosis data) Read2 CTV3 (GP clinical events) OPCS3 OPCS4 (HES operations) ukb_cancer ukb_noncancer (self-reported illness UK Biobank assessments - instances searched) Ascertaining diagnoses typically takes two steps:","code":""},{"path":"https://lcpilling.github.io/ukbrapR/articles/ascertain_diagnoses.html","id":"get-medical-records-and-self-reported-illness-data-for-provided-codes","dir":"Articles","previous_headings":"","what":"1. Get medical records and self-reported illness data for provided codes","title":"Ascertain diagnoses","text":"given set diagnostic codes get participant medical events self-reported data. Returns list 6 data frames: subset long clinical files matched codes. Codes need provided data frame two fields: vocab_id code. Valid code vocabularies listed . cols (condition description) ignored. providing primary care codes measures (BMI etc) also returned (gp_clinical object returned list contains cols matched codes).","code":"# example diagnostic codes for Chronic Kidney Disease  codes_df_ckd <- ukbrapR:::codes_df_ckd head(codes_df_ckd) #>   condition vocab_id  code #> 1       ckd    ICD10 N18.3 #> 2       ckd    ICD10 N18.4 #> 3       ckd    ICD10 N18.5 #> 4       ckd    ICD10 N18.6 #> 5       ckd    ICD10 N18.9 #> 6       ckd    ICD10   N19  # get diagnosis data - returns list of data frames (one per source) diagnosis_list <- get_diagnoses(codes_df_ckd)  #> ℹ ukbrapR v0.3.2 #> → Checking provided codes (remember only the first 5 characters are used) #>  - N unique ICD10 codes: 7  #>  - N unique Read2 codes: 40  #>  - N unique CTV3 codes: 37 #> → Ascertaining cause of death data. #> ✔ Loaded `death_cause` with 1962 matched rows. #> → Ascertaining HES diagnosis data (ICD10s). #> ✔ Loaded `hesin_diag` with 202562 matched rows. #> → Ascertaining GP data. #> ✔ Loaded `gp_clinical` with 30938 matched rows. #> ✔ Finished. Time taken: 29.3s.  # N records for each source nrow(diagnosis_list$gp_clinical) #> [1] 30938 nrow(diagnosis_list$hesin_diag) #> [1] 202562 nrow(diagnosis_list$death_cause) #> [1] 1962"},{"path":"https://lcpilling.github.io/ukbrapR/articles/ascertain_diagnoses.html","id":"get-date-first-diagnosed","dir":"Articles","previous_headings":"","what":"2. Get date first diagnosed","title":"Ascertain diagnoses","text":"Usually user interested combining separate data sources combined phenotype: date first diagnosed participant data/codes step 1 (cause death, HES diagnoses, GP clinical, cancer registry, HES operations, self-reported illness fields). addition “date first” df field : src field indicating source date first diagnosis. bin field indicating cases [1] controls [0]. relies small number baseline fields also exported. df field controls date censoring (currently 30 October 2022). bin_prev field indicating whether case UK Biobank baseline assessment can add prefix variable names specifying “prefix” option:","code":"# for each participant, get Date First diagnosed with the condition diagnosis_df <- get_df(diagnosis_list) #> ℹ ukbrapR v0.3.2 #> ✔ Identified date of first diagnosis in 31683 participants.  names(diagnosis_df) #> [1] \"eid\"      \"gp_df\"    \"hes_df\"   \"death_df\" \"df\"       \"bin\"      \"bin_prev\" #> [8] \"src\" summary(diagnosis_df) #>       eid              gp_df                hes_df           #>  Min.   :1000014   Min.   :1958-01-01   Min.   :1995-08-29   #>  1st Qu.:2256719   1st Qu.:2007-04-27   1st Qu.:2014-10-29   #>  Median :3513172   Median :2009-09-15   Median :2018-04-24   #>  Mean   :3513237   Mean   :2010-02-11   Mean   :2017-04-01   #>  3rd Qu.:4769764   3rd Qu.:2013-01-01   3rd Qu.:2020-11-04   #>  Max.   :6026565   Max.   :2017-09-06   Max.   :2022-10-31   #>                    NA's   :489524       NA's   :478078       #>     death_df                df                  bin             bin_prev       #>  Min.   :2008-02-20   Min.   :1958-01-01   Min.   :0.00000   Min.   :0.00000   #>  1st Qu.:2017-08-01   1st Qu.:2022-10-30   1st Qu.:0.00000   1st Qu.:0.00000   #>  Median :2020-03-03   Median :2022-10-30   Median :0.00000   Median :0.00000   #>  Mean   :2019-04-03   Mean   :2022-04-22   Mean   :0.06308   Mean   :0.01314   #>  3rd Qu.:2021-07-16   3rd Qu.:2022-10-30   3rd Qu.:0.00000   3rd Qu.:0.00000   #>  Max.   :2022-12-15   Max.   :2022-12-01   Max.   :1.00000   Max.   :1.00000   #>  NA's   :500347                                              NA's   :5         #>      src            #>  Length:502274      #>  Class :character   #>  Mode  :character   #>                     #>                     #>                     #> diagnosis_df <- get_df(diagnosis_list, prefix=\"ckd\") #> ℹ ukbrapR v0.3.2 #> ✔ Identified date of first ckd diagnosis in 31683 participants.  # how many cases ascertained? table(diagnosis_df$ckd_bin) #>  #>      0      1  #> 470591  31683  # source of earliest diagnosis date table(diagnosis_df$ckd_src) #>  #> death    gp   hes  #>   243 12401 19039  # date of diagnosis for prevalent cases (i.e., before UK Biobank baseline assessment) summary(diagnosis_df$ckd_df[ diagnosis_df$ckd_bin_prev == 1 ]) #>         Min.      1st Qu.       Median         Mean      3rd Qu.         Max.  #> \"1958-01-01\" \"2006-06-21\" \"2007-01-12\" \"2006-06-24\" \"2007-11-19\" \"2010-06-16\"  #>         NA's  #>          \"5\""},{"path":"https://lcpilling.github.io/ukbrapR/articles/ascertain_diagnoses.html","id":"ascertaining-multiple-conditions-at-once","dir":"Articles","previous_headings":"","what":"Ascertaining multiple conditions at once","title":"Ascertain diagnoses","text":"default get_df() behaviour use available codes. However, time-efficient way get multiple conditions run get_diagnoses() codes conditions wish ascertain, get “date first diagnosed” condition separately. codes data frame just need field indicating condition name, become variable prefixes. example also included UK Biobank self-reported illness code haemochromatosis, also ascertained (Date First run condition separately, need data sources).","code":"# combine haemochromatosis and CKD codes together #   each contain there columns: condition, vocab_id, and code #   where `condition` is either \"hh\" or \"ckd\" and will become the variable prefix codes_df_combined <- rbind(ukbrapR:::codes_df_hh, ukbrapR:::codes_df_ckd)  # get diagnosis data - returns list of data frames (one per source) diagnosis_list <- get_diagnoses(codes_df_combined) #> ℹ ukbrapR v0.3.2 #> → Checking provided codes (remember only the first 5 characters are used) #>  - N unique ICD10 codes: 8  #>  - N unique ICD9 codes: 1  #>  - N unique Read2 codes: 45  #>  - N unique CTV3 codes: 45  #>  - N unique UKB-self-reported codes: 1 #> → Ascertaining cause of death data. #> ✔ Loaded `death_cause` with 2004 matched rows. #> → Ascertaining HES diagnosis data (ICD10s). #> ✔ Loaded `hesin_diag` with 235259 matched rows. #> → Ascertaining HES diagnosis data (ICD9s). #> ✔ Loaded `hesin_diag` with 0 matched rows. #> → Ascertaining GP data. #> ✔ Loaded `gp_clinical` with 32379 matched rows. #> → Ascertaining self-reported illness data. #> ✔ Loaded `selfrep_illness` with 185 matched rows. #> ✔ Finished. Time taken: 38.4s.  # for each participant, get Date First diagnosed with the condition diagnosis_df <- get_df(diagnosis_list, group_by=\"condition\") #> ℹ ukbrapR v0.3.2 #> → 2 groups identified - getting date first for each #> ✔ Identified date of first hh diagnosis in 2002 participants. #> ✔ Identified date of first ckd diagnosis in 31683 participants. #> ℹ Finished getting date first diagnosed for each group/condition.  # each condition has full set of output table(diagnosis_df$hh_bin) #>  #>      0      1  #> 500267   2002  table(diagnosis_df$ckd_bin) #>  #>      0      1  #> 470591  31683"},{"path":"https://lcpilling.github.io/ukbrapR/articles/spark_functions.html","id":"pull-phenotype-data-from-spark-environment-to-an-r-data-frame","dir":"Articles","previous_headings":"","what":"Pull phenotype data from Spark environment to an R data frame","title":"Spark functions","text":"Needs run Apache Spark environment UK Biobank DNAnexus RAP. Recommend launching Spark cluster least mem1_hdd1_v2_x16 2 nodes otherwise can fail error “…ensure workers…sufficient resources” underlying code mostly UK Biobank GitHub.","code":"# get phenotype data (participant ID, sex, baseline age, and baseline assessment date) ukb <- get_rap_phenos(c(\"eid\", \"p31\", \"p21003_i0\", \"p53_i0\")) #> 48.02 sec elapsed  # summary of data table(ukb$p31) #> Female   Male  #> 273297 229067 summary(ukb$p21003_i0) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  37.00   50.00   58.00   56.53   63.00   73.00"},{"path":"https://lcpilling.github.io/ukbrapR/articles/spark_functions.html","id":"no-more-updates","dir":"Articles","previous_headings":"Pull phenotype data from Spark environment to an R data frame","what":"No more updates…","title":"Spark functions","text":"moving away using Spark default environment, mostly due cost implications; significantly cheaper (quicker!) store search exported raw text files RAP persistant storage everything Spark environment (plus added benefit RStudio interface available “normal” instances). Spark functions available updates improve functionality “normal” instances using RStudio, move new era RAP-UK Biobank analysis. need see previous release documentation follow tags version required: https://github.com/lcpilling/ukbrapR/tree/v0.1.7","code":""},{"path":"https://lcpilling.github.io/ukbrapR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luke Pilling. Author, maintainer.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pilling L (2025). ukbrapR: R functions use UK Biobank Research Analysis Platform (RAP). https://lcpilling.github.io/ukbrapR, https://github.com/lcpilling/ukbrapR.","code":"@Manual{,   title = {ukbrapR: R functions to use in the UK Biobank Research Analysis Platform (RAP)},   author = {Luke Pilling},   year = {2025},   note = {https://lcpilling.github.io/ukbrapR, https://github.com/lcpilling/ukbrapR}, }"},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"ukbrapr-","dir":"","previous_headings":"","what":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"ukbrapR (phonetically: ‘U-K-B-wrapper’) R package working UK Biobank Research Analysis Platform (RAP). aim make quicker, easier, reproducible. Since v0.2.0 ukbrapR works best “normal” cluster using RStudio raw data table-exporter. Old Spark functions still available updated. Wrapped server icon DALL-E","code":""},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"DNAnexus Tools menu launch Posit Workbench start RStudio environment.","code":"# install current version remotes::install_github(\"lcpilling/ukbrapR\")"},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"three main groups functions: 🧬 Genetics: extract genotypes Bulk data, create polygenic score 📋 Diagnoses: ascertain health records self-reported illness data, determine date first diagnosed 🛠️ Utilities: label UK Biobank data fields, upload/download files RAP, pull phenotypes Spark","code":""},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"genetic-variants","dir":"","previous_headings":"","what":"Genetic variants","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Bulk imputed genotypes variant calls Whole Genome Sequencing available can easily accessed RStudio instance.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"extract-variants","dir":"","previous_headings":"Genetic variants","what":"Extract variants","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"extract_variants() default uses bgenix plink subset imputed BGEN files read quickly easily R. required input data frame (path file) containing “rsid” “chr” variables. See function documentation details/options (including available make_imputed_bed() load_bed() internal functions). setting option source=\"dragen\" function instead use tabix plink subset DRAGEN WGS pVCF files. requires “pos” input data frame (build 38). much slower imputed version, unless actually need WGS calls necessary. highlight developing feature naming internal function make_dragen_bed() 🐉 🛏️","code":"varlist <- data.frame(rsid=c(\"rs1800562\",\"rs429358\"), chr=c(6,19))  imputed_genotypes <- extract_variants(varlist) #> ~10 seconds  dim(imputed_genotypes) #> [1] 487409      3 varlist_b38 <- data.frame(rsid=c(\"rs1800562\",\"rs429358\"), chr=c(6,19), pos=c(26092913,44908684))  dragen_genotypes <- extract_variants(varlist_b38, source=\"dragen\") #> ~3 minutes (takes ~90 seconds per pVCF file)"},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"create-polygenic-score","dir":"","previous_headings":"Genetic variants","what":"Create polygenic score","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"create_pgs() takes data frame containing list variant associations trait creates weighted allele score using plink. default uses imputed genotypes. required input data frame (path file) containing rsid, chr, pos, effect_allele, other_allele, beta. DRAGEN pos build 38.","code":"# weights from GWAS of liver cirrhosis (Innes 2020 Gastroenterology doi:10.1053/j.gastro.2020.06.014) varlist_pgs <- readr::read_tsv(system.file(\"files\", \"pgs_liver_cirrhosis.txt\", package=\"ukbrapR\")) head(varlist_pgs) #>   rsID         CHR       POS effect_allele other_allele effect_weight locus_name #>   <chr>      <dbl>     <dbl> <chr>         <chr>                <dbl> <chr>      #> 1 rs2642438      1 220796686 A             G                   -0.177 MARC1      #> 2 rs11925835     3  56831417 T             C                   -0.235 ARHGEF3    #> 3 rs72613567     4  87310241 TA            T                   -0.166 HSD17B13   #> 4 rs2954038      8 125495147 C             A                    0.16  TRIB1      #> 5 rs11065384    12 120985482 T             C                    0.275 HNF1A      #> 6 rs28929474    14  94378610 T             C                    0.561 SERPINA1    liver_pgs <- create_pgs(     in_file=varlist_pgs,                     # can be a data frame or file path     out_file=\"liver_cirrhosis.imputed.pgs\",  # {optional} prefix for created .bed and .tsv files     pgs_name=\"liver_cirrhosis_pgs\")          # {optional} variable name #> → Extracting 9 variants from 8 imputed files #> ✔ PGS created! See file liver_cirrhosis.imputed.pgs.tsv #> ~1 minute  summary(liver_pgs$liver_cirrhosis_pgs) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.00000 0.06006 0.08200 0.08589 0.10722 0.26639"},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"ascertain-diagnoses","dir":"","previous_headings":"","what":"Ascertain diagnoses","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Diagnosis conditions UK Biobank participants come multiple data sources. {ukbrapR} makes fast easy ascertain diagnoses multiple UK Biobank data sources DNAnexus Research Analysis Platform (RAP). Follow steps. See website article details.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"id_1-export-tables-of-raw-data","dir":"","previous_headings":"Ascertain diagnoses","what":"1. Export tables of raw data","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"needs happen per project. Run export_tables() submit table-exporter jobs save required files RAP persistent storage. ~10Gb text files created, costing ~£0.15 per month store.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"id_2-get-diagnoses-from-all-data-sources","dir":"","previous_headings":"Ascertain diagnoses","what":"2. Get diagnoses from all data sources","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"given set diagnostic codes get participant Electronic Medical Records (EMR) self-reported illess data. Returns list containing 6 data frames: subset clinical files matched codes. Codes need provided data frame two fields: vocab_id code. Valid code vocabularies : ICD10 (searching HES diagnoses, cause death, cancer registry) ICD9 (searching older HES diagnosis data) Read2 CTV3 (GP clinical events) OPCS3 OPCS4 (HES operations) ukb_cancer ukb_noncancer (self-reported illness UK Biobank assessments - instances searched)","code":"# example diagnostic codes for CKD  codes_df_ckd <- ukbrapR:::codes_df_ckd head(codes_df_ckd) #>   condition vocab_id  code #> 1       ckd    ICD10 N18.3 #> 2       ckd    ICD10 N18.4 #> 3       ckd    ICD10 N18.5 #> ...  # get diagnosis data - returns list of data frames (one per source) diagnosis_list <- get_diagnoses(codes_df_ckd)  #> 7 ICD10 codes, 40 Read2 codes, 37 CTV3 codes  #> ~2 minutes  # N records for each source nrow(diagnosis_list$gp_clinical)  #  29,083 nrow(diagnosis_list$hesin_diag)   # 206,390 nrow(diagnosis_list$death_cause)  #   1,962"},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"id_3-get-date-first-diagnosed","dir":"","previous_headings":"Ascertain diagnoses","what":"3. Get date first diagnosed","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Identify date first diagnosed participant datasets searched get_diagnoses() (cause death, HES diagnoses, GP clinical, cancer registry, HES operations, self-reported illness fields). Also included : src field indicating source date first diagnosis. bin field indicating cases [1] controls [0]. relies small number baseline fields also exported. df field controls date censoring (currently 30 October 2022). bin_prev field indicating whether case UK Biobank baseline assessment","code":"# for each participant, get Date First diagnosed with the condition #   {optional} add a prefix to the variable names with \"prefix\" diagnosis_df <- get_df(diagnosis_list, prefix=\"ckd\") #> ~2 seconds  # how many cases ascertained? table(diagnosis_df$ckd_bin) #>      0      1  #> 470334  31935   # source of earliest diagnosis date table(diagnosis_df$ckd_src) #>    death         gp        hes selfrep_i0 selfrep_i1 selfrep_i2 selfrep_i3  #>      224      12394      19310         85         16         63          3  # date of diagnosis for prevalent cases (i.e., before UK Biobank baseline assessment) summary(diagnosis_df$ckd_df[ diagnosis_df$ckd_bin_prev == 1 ]) #>         Min.      1st Qu.       Median         Mean      3rd Qu.         Max.  #> \"1958-01-01\" \"2006-06-21\" \"2007-01-12\" \"2006-06-24\" \"2007-11-19\" \"2010-06-16\""},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"ascertaining-multiple-conditions-at-once","dir":"","previous_headings":"Ascertain diagnoses","what":"Ascertaining multiple conditions at once","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"default get_df() behaviour use available codes. However time-efficient way get multiple conditions run get_diagnoses() codes conditions wish ascertain, get “date first diagnosed” condition separately. codes data frame just need field indicating condition name, become variable prefixes. example also included UK Biobank self-reported illness code haemochromatosis, also ascertained (Date First run condition separately, need data sources).","code":"# combine haemochromatosis and CKD codes together #   each contain there columns: condition, vocab_id, and code #   where `condition` is either \"hh\" or \"ckd\" and will become the variable prefix codes_df_combined = rbind(ukbrapR:::codes_df_hh, ukbrapR:::codes_df_ckd)  # get diagnosis data - returns list of data frames (one per source) diagnosis_list <- get_diagnoses(codes_df_combined)  # for each participant, get Date First diagnosed with the condition diagnosis_df = get_df(diagnosis_list, group_by=\"condition\")  # each condition has full set of output table(diagnosis_df$hh_bin) #>      0      1  #> 500254   2015   table(diagnosis_df$ckd_bin) #>      0      1  #> 470334  31935"},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"other-functions","dir":"","previous_headings":"","what":"Other functions","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Label UK Biobank data fields label_ukb_fields() Upload/download files worker RAP upload_to_rap() download_from_rap() Pull phenotypes Spark instance get_rap_phenos()","code":""},{"path":"https://lcpilling.github.io/ukbrapR/index.html","id":"questions-and-comments","dir":"","previous_headings":"","what":"Questions and comments","title":"R functions to use in the UK Biobank Research Analysis Platform (RAP)","text":"Please report bugs issues, feel free suggest changes pull requests. Alternatively, feel free contact via e-mail L.Pilling@exeter.ac.uk","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/create_pgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a polygenic score — create_pgs","title":"Create a polygenic score — create_pgs","text":"Use user-provided list genetic variants weights trait create polygenic score","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/create_pgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a polygenic score — create_pgs","text":"","code":"create_pgs(   in_file,   out_file = \"tmp\",   pgs_name = \"pgs\",   source = \"imputed\",   overwrite = FALSE,   progress = FALSE,   verbose = FALSE,   very_verbose = FALSE )"},{"path":"https://lcpilling.github.io/ukbrapR/reference/create_pgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a polygenic score — create_pgs","text":"in_file data frame file path. Must contain rsid, chr, pos, effect_allele, other_allele, beta. imputed genos pos build 37. DRAGEN pos build 38. columns ignored. out_file string. Prefix output files (optional) default=\"tmp\" pgs_name string. Variable name created PGS (optional) default=\"pgs\" source string. Either \"imputed\" \"dragen\" - indicating whether variants \"UKB imputation genotype\" (field 22828) \"DRAGEN population level WGS variants, pVCF format [500k release]\" (field 24310) default=\"imputed\" overwrite Logical. Overwrite output BED files? (out_file left 'tmp' overwrite set TRUE), default=FALSE progress Logical. Show progress individual file, default=FALSE verbose Logical. verbose (show individual steps), default=FALSE very_verbose Logical. verbose (show individual steps & show terminal output Plink etc), default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/create_pgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a polygenic score — create_pgs","text":"data frame","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/create_pgs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a polygenic score — create_pgs","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/create_pgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a polygenic score — create_pgs","text":"","code":"liver_pgs <- create_pgs(in_file=system.file(\"files\", \"pgs_liver_cirrhosis.txt\", package=\"ukbrapR\"), out_file=\"liver_cirrhosis.imputed.pgs\", pgs_name=\"liver_cirrhosis_pgs\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/download_from_rap.html","id":null,"dir":"Reference","previous_headings":"","what":"Use R to download a file to the UK Biobank RAP — download_from_rap","title":"Use R to download a file to the UK Biobank RAP — download_from_rap","text":"Use R download file UK Biobank RAP (really just wrapper `dx download`)","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/download_from_rap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use R to download a file to the UK Biobank RAP — download_from_rap","text":"","code":"download_from_rap(file, verbose = FALSE)"},{"path":"https://lcpilling.github.io/ukbrapR/reference/download_from_rap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use R to download a file to the UK Biobank RAP — download_from_rap","text":"file string. Filename file downloaded (character) verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/download_from_rap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use R to download a file to the UK Biobank RAP — download_from_rap","text":"NA","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/download_from_rap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use R to download a file to the UK Biobank RAP — download_from_rap","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/download_from_rap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use R to download a file to the UK Biobank RAP — download_from_rap","text":"","code":"readr::write_tsv(data.frame(x=1:10,y=11:20), \"ukbrap.dummy.20231114.txt.gz\")  # download file to RAP storage download_from_rap(file=\"ukbrap.dummy.20231114.txt.gz\", dir=\"extracts/\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/export_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Export diagnosis files to RAP persistent storage — export_tables","title":"Export diagnosis files to RAP persistent storage — export_tables","text":"UK Biobank RAP export tables HES, GP, death, cancer registry data, plus self-reported illness fields, using table-exporter. essentially wrapper function submit jobs table exporter. Suggest executing RStudio session. ~10Gb text files created. cost ~£0.15 per month store RAP standard storage.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/export_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export diagnosis files to RAP persistent storage — export_tables","text":"","code":"export_tables(   submit = FALSE,   ignore_warnings = FALSE,   file_paths = ukbrapR:::ukbrapr_paths,   dataset = NULL,   verbose = FALSE )"},{"path":"https://lcpilling.github.io/ukbrapR/reference/export_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export diagnosis files to RAP persistent storage — export_tables","text":"submit Logical. Actually submit `dx` commands. Default FALSE .e., just check inputs & file paths, print commands, default=FALSE ignore_warnings Logical. exported table already exists submit table-exporter command unless TRUE, default=FALSE file_paths data frame. Columns must `object` `path` containing paths outputted files. blank, use default paths, default=ukbrapR:::ukbrapr_paths dataset string. wish specify dataset. blank, use recently dispensed dataset main project directory. default=app#####_#####.dataset verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/export_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export diagnosis files to RAP persistent storage — export_tables","text":"NA","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/export_tables.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Export diagnosis files to RAP persistent storage — export_tables","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/export_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export diagnosis files to RAP persistent storage — export_tables","text":"","code":"# To keep files organised this package assumes the following file structure  #  This object is not actually required but illstrates the defaults to be  #  created in your RAP space (override by providing a new `file_paths`): ukbrapr_paths = data.frame(   object=c(\"death\",\"death_cause\",\"hesin\",\"hesin_diag\",\"hesin_oper\",\"gp_clinical\",\"gp_scripts\",\"selfrep_illness\",\"cancer_registry\",\"baseline_dates\"),   path=c(     \"ukbrapr_data/death.tsv\",     \"ukbrapr_data/death_cause.tsv\",     \"ukbrapr_data/hesin.tsv\",     \"ukbrapr_data/hesin_diag.tsv\",     \"ukbrapr_data/hesin_oper.tsv\",     \"ukbrapr_data/gp_clinical.tsv\",     \"ukbrapr_data/gp_scripts.tsv\",     \"ukbrapr_data/selfrep_illness.tsv\",     \"ukbrapr_data/cancer_registry.tsv\",     \"ukbrapr_data/baseline_dates.tsv\"   ) ) ukbrapr_paths  # test run to see `dx run table-exporter` commands - but will not submit jobs export_tables()  # Submit all `dx run table-exporter` commands. ~10Gb of text files are created. This will cost ~£0.15 per month to store in the RAP standard storage. export_tables(submit=TRUE)"},{"path":"https://lcpilling.github.io/ukbrapR/reference/extract_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variants from bulk data and load to memory — extract_variants","title":"Extract variants from bulk data and load to memory — extract_variants","text":"Use user-provided list genetic variants extract imputed WGS (DRAGEN) data load data.frame","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/extract_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variants from bulk data and load to memory — extract_variants","text":"","code":"extract_variants(   in_file,   out_bed = \"tmp\",   source = \"imputed\",   overwrite = FALSE,   progress = FALSE,   verbose = FALSE,   very_verbose = FALSE )"},{"path":"https://lcpilling.github.io/ukbrapR/reference/extract_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variants from bulk data and load to memory — extract_variants","text":"in_file data frame file path. Contains rsid, chr, pos. imputed genos pos build 37. DRAGEN pos build 38. columns ignored. out_bed string. Prefix output files (optional) default=\"tmp\" source string. Either \"imputed\" \"dragen\" - indicating whether variants \"UKB imputation genotype\" (field 22828) \"DRAGEN population level WGS variants, pVCF format [500k release]\" (field 24310) default=\"imputed\" overwrite Logical. Overwrite output BED files? (output prefix left 'tmp' overwrite set TRUE), default=FALSE progress Logical. Show progress individual file, default=FALSE verbose Logical. verbose (show individual steps), default=FALSE very_verbose Logical. verbose (show individual steps & show terminal output Plink etc), default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/extract_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variants from bulk data and load to memory — extract_variants","text":"data frame","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/extract_variants.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract variants from bulk data and load to memory — extract_variants","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/extract_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variants from bulk data and load to memory — extract_variants","text":"","code":"liver_variants <- extract_variants(in_file=system.file(\"files\", \"pgs_liver_cirrhosis.txt\", package=\"ukbrapR\"), out_bed=\"liver_cirrhosis.imputed.variants\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant Date First (DF) diagnosis — get_df","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"participant identify date first diagnosis available electronic medical records & self-reported data. `use_baseline_dates=TRUE` (default) also produce binary 0/1 variable, indicating controls (people without diagnosis) setting date first `_df` field date censoring (currently 30 October 2022).","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"","code":"get_df(   diagnosis_list,   prefix = NULL,   group_by = NULL,   include_selfrep_illness = TRUE,   include_death_cause = TRUE,   include_gp_clinical = TRUE,   include_hesin_diag = TRUE,   include_hesin_oper = TRUE,   include_cancer_registry = TRUE,   use_baseline_dates = TRUE,   file_paths = NULL,   censoring_date = \"30-10-2022\",   verbose = FALSE )"},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"diagnosis_list list data frames. output `get_diagnoses()` .e., raw diagnosis self-reported illness data matched provided codes list. prefix String. Prefix add variable names (e.g., prefix=\"chd\" output variables \"chd_gp_df\", \"chd_hes_df\", \"chd_df\" etc.) default=NULL group_by String. codes list provided `get_diagnoses()` (.e., diagnosis_list$codes_df) contained grouping/condition variable, indicate variable name . \"Date first\" variables created prefix grouping variable. `prefix` option ignored, favour names grouping variable. default=NULL include_selfrep_illness logical. Include self-reported diagnosesin combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_death_cause logical. Include cause death combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_gp_clinical logical. Include GP data combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_hesin_diag logical. Include HES diagnosis data combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_hesin_oper logical. Include HES OPCS (operations) data combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE include_cancer_registry logical. Include cancer registry data combined Date First output? present `diagnosis_list` still provide separate `_df` variable default=TRUE use_baseline_dates logical. `baseline_dates` available file paths, produce binary 0/1 variable, indicating controls (people without diagnosis) setting date first `_df` field date censoring (currently see `censoring_date` option). default=TRUE file_paths data frame. Columns must `object` `path` containing paths outputted files. provided use `ukbrapr_paths` default=NULL censoring_date string. using baseline data infer control participants, include censoring date (set NA desired). Use dd-mm-yyyy format. Default (current) HES date. default=\"30-10-2022\" verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"Returns single, \"wide\" data frame: participant data requested diagnosis codes \"date first\" `_df` variables. One source data, combined variable.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant Date First (DF) diagnosis — get_df","text":"","code":"############################################### # example 1. haemochromatosis  # get diagnosis data - returns list of data frames (one per source) diagnosis_list <- get_diagnoses(ukbrapR:::codes_df_hh)  # for each participant, get Date First diagnosed with the condition diagnosis_df <- get_df(diagnosis_list, prefix=\"hh\")  ############################################### # example 2. get multiple diseases at once #            don't have to all have the same code types/data sources  codes = rbind(ukbrapR:::codes_df_hh, ukbrapR:::codes_df_ckd) print(codes)  # get diagnosis data - returns list of data frames (one per source) diagnosis_list <- get_diagnoses(codes)  # for each participant, get Date First diagnosed with the condition diagnosis_df <- get_df(diagnosis_list, group_by=\"condition\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_diagnoses.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant diagnosis data — get_diagnoses","title":"Get UK Biobank participant diagnosis data — get_diagnoses","text":"list diagnostic codes get HES, GP, cancer registry, operations, self-reported illness data, matching provided codes. Valid code vocabularies : - ICD10 (`hesin`, `death_cause` `cancer_registry` searches) - fuzzy matching - ICD9 (`hesin` searches) - fuzzy matching - Read2 / CTV3 (`gp_clinical`) - exact matches first 5 characters - OPCS3 / OPCS4 (`hesin_oper`) - fuzzy matching - ukb_cancer / ukb_noncancer (self-reported illness UK Biobank assessments - available searched) - exact matches function relies exported raw data files thus need run Spark cluster. files default locations package need specify  `file_paths` exported tables. Recommend run `export_tables()` project export tables default paths package.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_diagnoses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant diagnosis data — get_diagnoses","text":"","code":"get_diagnoses(codes_df, file_paths = NULL, verbose = FALSE)"},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_diagnoses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant diagnosis data — get_diagnoses","text":"codes_df data frame. Contains two columns: `code` `vocab_id` .e., list diagnostic codes, indicator vocabulary (ICD10, Read2, CTV3, OPCS3, OPCS4, ukb_cancer, ukb_noncancer recognised). columns ignored. file_paths data frame. Columns must `object` `path` containing paths required files. Default assumes tables exported RAP environment ukbrapR::export_tables() default=ukbrapR:::ukbrapr_paths verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_diagnoses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant diagnosis data — get_diagnoses","text":"Returns list data frames (participant data requested diagnosis codes: `death_cause`, `hesin_diag`, `hesin_oper`, `gp_clinical`, `cancer_registry` `selfrep_illness`. Also includes original codes list)","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_diagnoses.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant diagnosis data — get_diagnoses","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_diagnoses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant diagnosis data — get_diagnoses","text":"","code":"# example diagnostic codes for CKD from GEMINI multimorbidity project codes_df_ckd <- ukbrapR:::codes_df_ckd head(codes_df_ckd)  # Get diagnosis data - returns list of data frames (one per source) # -- Requires exported tables - see `export_tables()`  diagnosis_list <- get_diagnoses(codes_df_ckd)  # don't forget to save and upload data to RAP persistent storage! save(diagnosis_list, \"ukbrap.CKD.emr.20231114.RDat\") upload_to_rap(file=\"ukbrap.CKD.*\", dir=\"\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_emr_spark.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant Electronic Medical Records (EMR) data in a RAP Spark environment — get_emr_spark","title":"Get UK Biobank participant Electronic Medical Records (EMR) data in a RAP Spark environment — get_emr_spark","text":"function completely removed. Better use `get_diagnoses()`. Use historic release package really need https://github.com/lcpilling/ukbrapR/releases","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_emr_spark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant Electronic Medical Records (EMR) data in a RAP Spark environment — get_emr_spark","text":"","code":"get_emr_spark(   codes_df = NULL,   spark_master = \"spark://master:41000\",   verbose = FALSE )"},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_emr_spark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant Electronic Medical Records (EMR) data in a RAP Spark environment — get_emr_spark","text":"codes_df data frame. Contains two columns: `code` `vocab_id` .e., list diagnostic codes, indicator vocabulary. columns ignored. spark_master string. `master` argmuent passed `sparklyr::spark_connect()`. default='spark://master:41000' verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_emr_spark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant Electronic Medical Records (EMR) data in a RAP Spark environment — get_emr_spark","text":"Returns nothing","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_emr_spark.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant Electronic Medical Records (EMR) data in a RAP Spark environment — get_emr_spark","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_rap_phenos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant phenotype data — get_rap_phenos","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"Using Spark node/cluster UK Biobank Research Analysis Platform (DNAnexus), use R extract provided set variables. Using code UK Biobank DNAnexus team https://github.com/UK-Biobank/UKB-RAP-Notebooks/blob/main/NBs_Prelim/105_export_participant_data_to_r.ipynb","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_rap_phenos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"","code":"get_rap_phenos(   names,   value_coding = \"replace\",   names_are_titles = FALSE,   record = NULL,   verbose = FALSE )"},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_rap_phenos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"names string vector strings. variable name(s) required. e.g., c(\"eid\",\"p31\",\"p21003_i0\") value_coding string. handle coded fields. \"replace\" coding value exists, replace raw value code; \"raw\" export raw values field; \"exclude\" coding value exists, export value (commonly used sparse fields). default=\"replace\" names_are_titles Logical. Passing DNAnexus variable \"titles\" e.g., c(\"Age recruitment\", \"Standing height | Instance 0\"). default=FALSE record string. `dnanexus_link` file descriptor .dataset use. Default (left NULL) use recently dispensed dataset. default=recent dataset verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_rap_phenos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"Returns data.frame (participant data requested variables)","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_rap_phenos.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_rap_phenos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant phenotype data — get_rap_phenos","text":"","code":"# get phenotype data ukb <- get_rap_phenos(c(\"eid\",\"p31\",\"p21003_i0\",\"p53_i0\"))  # save to file on the RAP worker node readr::write_tsv(ukb, \"ukbrap.phenos.20231114.txt.gz\")  # upload data to RAP storage upload_to_rap(file=\"ukbrap.phenos.20231114.txt.gz\", dir=\"\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_selfrep_illness_spark.html","id":null,"dir":"Reference","previous_headings":"","what":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness_spark","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness_spark","text":"specific self-reported illness code codes, identify whether participant self-reported visit, identify year. Intended use UK Biobank DNnexus Research Analysis Platform, user provides dataframe UK Biobank self-reported fields works system.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_selfrep_illness_spark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness_spark","text":"","code":"get_selfrep_illness_spark(   codes_df,   vocab_col = \"vocab_id\",   codes_col = \"code\",   ukb_dat = NULL,   n_cancer_arrays = 5,   n_noncancer_arrays = 30,   verbose = FALSE )"},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_selfrep_illness_spark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness_spark","text":"codes_df data frame. Contains `vocab_col` `codes_col` .e., indicator vocabulary diagnostic codes. vocab_col string. Column name `codes_df` contains vocabulary indicator code (self-reported needs either \"ukb_cancer\" \"ukb_noncancer\"). default='vocab_id' codes_col string. Column name `codes_df` contains self-reported disease code (e.g., 1507). default='code' ukb_dat data frame. Optional. provided, get phenotypes RAP. Contains self-reported illness fields e.g., `p20008_i0_a0`. default=NULL n_cancer_arrays integer. trivial determine max number arrays request Spark self-reported illnesses. defaults match currently (Feb 2024) available data may need increasing future. default=5 n_noncancer_arrays integer. trivial determine max number arrays request Spark self-reported illnesses. defaults match currently (Feb 2024) available data may need increasing future. default=30 verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_selfrep_illness_spark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness_spark","text":"Returns data frame four variables: eid, selfrep [binary, codes identified?], selfrep_df [date reported illness], selfrep_i [instance illness first reported]","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_selfrep_illness_spark.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness_spark","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/get_selfrep_illness_spark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get UK Biobank participant self-reported illness/year data for specific codes — get_selfrep_illness_spark","text":"","code":"# example diagnostic codes for haemochromatosis print(codes_df_hh)  # get self-reported data - a data frame selfrep_df <- get_selfrep_illness_spark(codes_df_hh)  # inspect variables table(selfrep_df$selfrep) summary(selfrep_df$selfrep_df) table(selfrep_df$selfrep_i)"},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Update UK Biobank field with `title` and `label` from the schema — label_ukb_field","title":"Update UK Biobank field with `title` and `label` from the schema — label_ukb_field","text":"Variables education ethnicity provided integers specific codes. UK Biobank schema machine-readable dictionaries mappings defining internal structure online Showcase. https://biobank.ctsu.ox.ac.uk/crystal/schema.cgi function updates field data frame UK Biobank information Schema.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update UK Biobank field with `title` and `label` from the schema — label_ukb_field","text":"","code":"label_ukb_field(d, field, field_id = NULL, verbose = FALSE)"},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update UK Biobank field with `title` and `label` from the schema — label_ukb_field","text":"d data frame. data frame containing `field` update. field string. field (e.g., `p54_i0`) provided data frame update. field_id string. field renamed (e.g.,\"assessment_centre\") provide field id (e.g., \"54\"). default=NULL verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update UK Biobank field with `title` and `label` from the schema — label_ukb_field","text":"Returns data frame.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_field.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update UK Biobank field with `title` and `label` from the schema — label_ukb_field","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update UK Biobank field with `title` and `label` from the schema — label_ukb_field","text":"","code":"# update the Assessment Centre variable ukb <- ukbrapR::label_ukb_field(ukb, field=\"p54_i0\")  table(ukb$p54_i0)                   # tabulates the values table(haven::as_factor(ukb$p54_i0)) # tabulates the labels haven::print_labels(ukb$p54_i0)     # show the value:label mapping for this variable  # if the variable has been renamed, provide the \"field\" and \"field_id\" e.g., ukb <- ukbrapR::label_ukb_field(ukb, field=\"assessment_centre\", field_id=\"54\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a data frame containing UK Biobank fields with `title` and `label` from the schema — label_ukb_fields","title":"Update a data frame containing UK Biobank fields with `title` and `label` from the schema — label_ukb_fields","text":"Variables education ethnicity provided integers specific codes. UK Biobank schema machine-readable dictionaries mappings defining internal structure online Showcase. https://biobank.ctsu.ox.ac.uk/crystal/schema.cgi function updates data frame UK Biobank data field information Schema. effect wrapper apply ukbrapR::label_ukb_field() variable data frame looks like UK Biobank field. recognised fields modified (variables named things like \"p54_i0\"). variables ignored.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a data frame containing UK Biobank fields with `title` and `label` from the schema — label_ukb_fields","text":"","code":"label_ukb_fields(d, verbose = FALSE)"},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a data frame containing UK Biobank fields with `title` and `label` from the schema — label_ukb_fields","text":"d data frame. data frame containing UK Biobank fields update. verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a data frame containing UK Biobank fields with `title` and `label` from the schema — label_ukb_fields","text":"Returns data frame.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_fields.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update a data frame containing UK Biobank fields with `title` and `label` from the schema — label_ukb_fields","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/label_ukb_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a data frame containing UK Biobank fields with `title` and `label` from the schema — label_ukb_fields","text":"","code":"# say the below data frame contains 4 variables: `eid`, `p54_i0`, `p50_i0` and `age_at_assessment`  names(ukb)  # update the variables that looks like UK Biobank fields with titles and, where cateogrical, labels  # i.e., `p54_i0` and `p50_i0` only -- `eid` and `age_at_assessment` are ignored ukb <- ukbrapR::label_ukb_fields(ukb)  table(ukb$p54_i0)                   # tabulates the values table(haven::as_factor(ukb$p54_i0)) # tabulates the labels haven::print_labels(ukb$p54_i0)     # show the value:label mapping for this variable"},{"path":"https://lcpilling.github.io/ukbrapR/reference/load_bed.html","id":null,"dir":"Reference","previous_headings":"","what":"Load BED file into memory — load_bed","title":"Load BED file into memory — load_bed","text":"Use Plink convert BED RAW easily load ","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/load_bed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load BED file into memory — load_bed","text":"","code":"load_bed(in_bed, verbose = FALSE, very_verbose = FALSE)"},{"path":"https://lcpilling.github.io/ukbrapR/reference/load_bed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load BED file into memory — load_bed","text":"in_bed string. BED prefix verbose Logical. verbose (show individual steps), default=FALSE very_verbose Logical. verbose (show individual steps & show terminal output Plink etc), default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/load_bed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load BED file into memory — load_bed","text":"data frame","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/load_bed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load BED file into memory — load_bed","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/load_bed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load BED file into memory — load_bed","text":"","code":"liver_variants <- load_bed(in_bed=\"liver_cirrhosis.imputed.variants\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_dragen_bed.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variants from DRAGEN pVCF file(s) into single BED file — make_dragen_bed","title":"Extract variants from DRAGEN pVCF file(s) into single BED file — make_dragen_bed","text":"given set genomic coordinates extract UK Biobank WGS DRAGEN variant calls (spread across many pVCFs) single BED file.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_dragen_bed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variants from DRAGEN pVCF file(s) into single BED file — make_dragen_bed","text":"","code":"make_dragen_bed(   in_file,   out_bed,   progress = TRUE,   verbose = FALSE,   very_verbose = FALSE )"},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_dragen_bed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variants from DRAGEN pVCF file(s) into single BED file — make_dragen_bed","text":"in_file data frame file path. Contains least two columns: `chr` `pos` (build 38). columns ignored. out_bed string. progress Logical. Show progress individual file, default=TRUE verbose Logical. verbose (show individual steps), default=FALSE very_verbose Logical. verbose (show individual steps & show terminal output Plink etc), default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_dragen_bed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variants from DRAGEN pVCF file(s) into single BED file — make_dragen_bed","text":"single merged BED file (BIM FAM files)","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_dragen_bed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract variants from DRAGEN pVCF file(s) into single BED file — make_dragen_bed","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_dragen_bed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variants from DRAGEN pVCF file(s) into single BED file — make_dragen_bed","text":"","code":"make_dragen_bed(in_file=system.file(\"files\", \"pgs_liver_cirrhosis.txt\", package=\"ukbrapR\"), out_bed=\"liver_cirrhosis.dragen.variants\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_imputed_bed.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variants from imputed genotype file(s) into single BED file — make_imputed_bed","title":"Extract variants from imputed genotype file(s) into single BED file — make_imputed_bed","text":"given set genomic coordinates extract UK Biobank imputed genotypes (v3) single BED file.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_imputed_bed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variants from imputed genotype file(s) into single BED file — make_imputed_bed","text":"","code":"make_imputed_bed(   in_file,   out_bed,   progress = TRUE,   verbose = FALSE,   very_verbose = FALSE )"},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_imputed_bed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variants from imputed genotype file(s) into single BED file — make_imputed_bed","text":"in_file data frame file path. Contains least two columns: `rsID` `CHR`. columns ignored. out_bed string. progress Logical. Show progress individual file, default=TRUE verbose Logical. verbose (show individual steps), default=FALSE very_verbose Logical. verbose (show individual steps & show terminal output Plink etc), default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_imputed_bed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variants from imputed genotype file(s) into single BED file — make_imputed_bed","text":"single merged BED file (BIM FAM files)","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_imputed_bed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract variants from imputed genotype file(s) into single BED file — make_imputed_bed","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/make_imputed_bed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variants from imputed genotype file(s) into single BED file — make_imputed_bed","text":"","code":"make_imputed_bed(in_file=system.file(\"files\", \"pgs_liver_cirrhosis.txt\", package=\"ukbrapR\"), out_bed=\"liver_cirrhosis.imputed.variants\")"},{"path":"https://lcpilling.github.io/ukbrapR/reference/upload_to_rap.html","id":null,"dir":"Reference","previous_headings":"","what":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"Use R upload file UK Biobank RAP (really just wrapper `dx upload`)","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/upload_to_rap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"","code":"upload_to_rap(file, dir = \"FALSE\", verbose = FALSE)"},{"path":"https://lcpilling.github.io/ukbrapR/reference/upload_to_rap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"file string. Filename file uploaded (character) dir string. Target directory RAP space. blank, current working directory (character) verbose Logical. verbose, default=FALSE","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/upload_to_rap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"NA","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/upload_to_rap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"Luke Pilling","code":""},{"path":"https://lcpilling.github.io/ukbrapR/reference/upload_to_rap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use R to upload a file to the UK Biobank RAP — upload_to_rap","text":"","code":"readr::write_tsv(data.frame(x=1:10,y=11:20), \"ukbrap.dummy.20231114.txt.gz\")  # upload file to RAP storage upload_to_rap(file=\"ukbrap.dummy.20231114.txt.gz\", dir=\"extracts/\")"},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"changes-0-3-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"ukbrapR v0.3.2 (19th February 2025)","text":"Remove bundled plink, plink2 bgenix files. Instead, download needed. Add consistent progress updates make_dragen_bed() make_imputed_bed() Add “progress” options extract_variants() create_pgs() (default FALSE). Default TRUE directly call make_dragen_bed() make_imputed_bed()","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.3.2 (19th February 2025)","text":"Fix make_dragen_bed() doesn’t crash pVCF subset empty (.e., searched-chr:pos missing)","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.3.1 (10th February 2025)","text":"Fix make_dragen_bed() position awk search, plink call Fix create_pgs() using WGS - needed use chr:pos:a1:a2 rsid Fix make_imputed_bed() doesn’t crash BGEN subset empty (.e., searched-rsid missing)","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"ukbrapR v0.3.0 (29th January 2025)","text":"Suite functions extract load genetic variants. Main ones interest : 1. extract_variants() takes list variant rsIDs input extracts imputed genotypes, loading memory. really wrapper around two new functions: make_imputed_bed() load_bed(). Also available make_dragen_bed() extract whole genome sequence VCF files pretty slow usually user wants imputed variants. 2. create_pgs() creates polygenic score (weighted allele score) using user-provided variants weights. Loaded memory also saves nicely formatted .tsv","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ukbrapR v0.3.0 (29th January 2025)","text":"Removing dependencies: reticulate, arrow, sparklyr. take previous seconds install every time rarely needed. Instead installed user tries use get_rap_phenos() get_emr_spark() removed entirely. Much better use get_diagnoses() lot updates functionality ad bud fixes.","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-2-9","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.2.9 (12th January 2025)","text":"OPCS searches always performed correctly OPCS3/4 codes provided. using “group_by” get_df() diagnoses incorrectly carried groups different vocabs provided group (condition).","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"updates-0-2-9","dir":"Changelog","previous_headings":"","what":"Updates","title":"ukbrapR v0.2.9 (12th January 2025)","text":"Additional checking get_diagnoses() input abort “blank” codes provided grep. getting date first self-reported illness data exclude “year” < 1936 (earliest birth year participant)","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-2-8","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.2.8 (05 October 2024)","text":"Baseline dates TSV now correctly located even user changes working directory HES operations dates sometimes parsed character - now fixed parse dates","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"updates-0-2-8","dir":"Changelog","previous_headings":"","what":"Updates","title":"ukbrapR v0.2.8 (05 October 2024)","text":"Warnings relating parsing issues grepping safe ignore now suppressed Updates documentation / examples / pkgdown site New website articles ascertain_diagnoses, label_fields spark_functions","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"updates-0-2-7","dir":"Changelog","previous_headings":"","what":"Updates","title":"ukbrapR v0.2.7 (30 September 2024)","text":"New function label_ukb_field() allows user add titles labels UK Biobank fields provided integers categorical. New function label_ukb_fields() wrapper . User just provides data frame containing UK Biobank fields, get formatted titles (labels categorical). Data UK Biobank schema (https://biobank.ctsu.ox.ac.uk/crystal/schema.cgi) stored internally ukbrapR:::ukb_schema {haven} dependency added labelling Exported baseline_dates.tsv now also includes assessment centres completeness (keeps filename avoid issues current projects relying already-exported files)","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fix-0-2-6","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"ukbrapR v0.2.6 (16 September 2024)","text":"Fix issue #10. Grep issues user provided Read2 CTV3 codes, Read2 CTV3 <5 characters, Read2/CTV3 codes contained hyphen. Thanks @Simon-Leyss highlighting. Fix issue #11. getting self-reported illness codes problem joining tables user provided cancer codes. Thanks @LauricF highlighting. Fix types self-reported illness codes provided. (Incorrect subsetting just codes provided pivoting long object.)","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fix-0-2-5","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"ukbrapR v0.2.5 (07 September 2024)","text":"getting date first cancer registry diagnosis, rows duplicated. now fixed one row per participant (date first matched cancer ICD10) returned.","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"changes-0-2-4","dir":"Changelog","previous_headings":"","what":"Changes","title":"ukbrapR v0.2.4 (05 September 2024)","text":"Updated internal paths servers indy snow (ongoing projects whilst can still use local files…) Updated get_diagnoses() get_df() handle user-provided file_paths object","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-2-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.2.3 (22 August 2024)","text":"Fix issue #8. moving HES ICD10 code block cancer registry code acctidently put within (get_canreg)  { } condition. Thanks @LauricF highlighting. Fix bullet points pkgdown version docs","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"update-0-2-2","dir":"Changelog","previous_headings":"","what":"Update","title":"ukbrapR v0.2.2 (21 August 2024)","text":"HESIN diagnosis search can now also include ICD9 codes provided codes data frame. use fuzzy matching (similar ICD10s) searching “280” also returns “2809” etc","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fix-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"ukbrapR v0.2.1 (10 August 2024)","text":"Fix issue #5. file paths exported tables correctly specified later calls get_diagnoses() working directory home directory. Thanks @LauricF highlighting.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"ukbrapr-v020-30-july-2024","dir":"Changelog","previous_headings":"","what":"ukbrapR v0.2.0 (30 July 2024)","title":"ukbrapR v0.2.0 (30 July 2024)","text":"major update move away using Spark default environment, mostly due cost implications; significantly cheaper (quicker!) store search exported raw text files RAP persistant storage everything Spark environment (plus added benefit RStudio interface available “normal” instances). Spark functions available updates improve functionality “normal” instances using RStudio, move new era RAP-UK Biobank analysis.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"ukbrapR v0.2.0 (30 July 2024)","text":"Added internal data frame containing default paths exported files RAP project (view ukbrapR:::ukbrapr_paths) Added function export_tables() needs run new project created. submits required table exporter commands extract tables ukbrapR:::ukbrapr_paths. can take ~15 minutes export tables. ~10Gb text files created. cost ~£0.15 per month store RAP standard storage. get_emr() split two primary underlying functions: get_emr_spark() changed, get_emr() “new way” (.e., get_emr_local() entirely removed) Added functionality hesin_oper (HES OPCS operations) searching ICD10 codes get_emr() New/updated internal functions get_cancer_registry() asceratains cases using ICD10s cancer_registry data, works much get_selfrep_illness() New function get_diagnoses() wrapper get HES diagnosis, operations, cause death, GP, cancer registry, self-reported illness data – .e., function provide codes , return health-related data get_df() takes output get_diagnoses() .e., now also identifies date first matched cancer_registry hesin_oper entries, addition hes_diag, gp_clinical, death_cause selfrep_illness . getting “date first” using get_df() baseline data used create binary case/control variables (ever prevalent), controls censoring date included overall _df variable (default 30-10-2022). make absolutely clear: Spark function get_emr_spark() updated longer focussed things way. want submit Pull Requests improve functions please . changes substantially improve experience using exported tables RAP environment (data local system already work, assuming format correctly provide paths, RAP future).","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-1-7","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.1.7 (28 July 2024)","text":"Fix Spark database error >1 dataset file available. Fixes issue #3","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-1-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.1.6 (03 July 2024)","text":"Fix get_df() error ascertaining GP diagnoses 7-character codes provided rather 5","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"changes-0-1-6","dir":"Changelog","previous_headings":"","what":"Changes","title":"ukbrapR v0.1.6 (03 July 2024)","text":"get_emr() now accepts option “file_paths” - provided, attempts get Spark Improve documentation examples","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-1-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.1.5 (01 July 2024)","text":"Fix get_df() error occurring sources desired","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"changes-0-1-5","dir":"Changelog","previous_headings":"","what":"Changes","title":"ukbrapR v0.1.5 (01 July 2024)","text":"get_emr_local() option “local_paths” now “file_paths” Improve documentation examples","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-1-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.1.4 (12 June 2024)","text":"Fix problem identifying ICD10 column name RAP HESIN Fix problem getting date first GP data (excluding missing dates summarizing)","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"new-feature-0-1-3","dir":"Changelog","previous_headings":"","what":"New feature","title":"ukbrapR v0.1.3 (8 June 2024)","text":"quicker/easier ascertain multiple conditions supply get_emr() codes (), now can use get_df() option “group_by” indicate condition names codes_df object provided. See documentation.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Changes","title":"ukbrapR v0.1.3 (8 June 2024)","text":"longer possible provide custom names codes_df get_emr() – now must vocab_id code – makes things much simpler. Remove ICD9 code codes_df_hh example currently used","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"new-features-0-1-2","dir":"Changelog","previous_headings":"","what":"New features","title":"ukbrapR v0.1.2 (6 June 2024)","text":"New function get_emr_local(). user text files hesin_diag gp_clinical etc. can searched (rather Apache Spark queries). therefore can work “normal” DNAnexus nodes, local servers. downstream functions also rely Spark clusters data extracts available.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"ukbrapR v0.1.2 (6 June 2024)","text":"Change URL reflect GitHub username change lukepilling lcpilling consistent different logins, websites, social media – https://lcpilling.github.io/ukbrapR – https://github.com/lcpilling/ukbrapR Added dependency {cli} improved alert/error reporting","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"ukbrapR v0.1.1 (6 March 2024)","text":"New argument “prefix” get_df() - user can provide string prefix output variable names","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"ukbrapR v0.1.0 (21 Feb 2024)","text":"get_selfrep_illness() - gets illness information self-report fields. Derives “date first” age/year reported, incorporating visits participant Two example code lists incuded: codes_df_ckd (GEMINI CKD), codes_df_hh (haemochromatosis, self-report)","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"ukbrapR v0.1.0 (21 Feb 2024)","text":"get_emr_df() re-named get_df() reflect can now include information self-reported illness get_emr_diagnoses() re-named get_emr() reflect actually retrieves record gp_clinical just diagnoses (e.g., BMI appropriate codes provided)","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.1.0 (21 Feb 2024)","text":"many","code":""},{"path":[]},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"New features","title":"ukbrapR v0.0.2 (14 Nov 2023)","text":"get_emr_diagnoses() - function get electronic medical records diagnoses Spark-based death records, hospital episode statistics, primary care (GP) databases. get_emr_df() - function get date first diagnosed provided code Electronic Medical Record source.","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"bug-fixes-0-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ukbrapR v0.0.2 (14 Nov 2023)","text":"Extra input checking get_rap_phenos() output consistent direct use get_emr_*() functions Updated URL example CKD clinical codes","code":""},{"path":"https://lcpilling.github.io/ukbrapR/news/index.html","id":"ukbrapr-v001-26-oct-2023","dir":"Changelog","previous_headings":"","what":"ukbrapR v0.0.1 (26 Oct 2023)","title":"ukbrapR v0.0.1 (26 Oct 2023)","text":"Initial release containing two functions: - get_rap_phenos() - upload_to_rap()","code":""}]
